__author__ = "Roberto Medina"
__copyright__ = "Copyright 2021, Roberto Carlos Medina"
__version__ = "0.0.1"
__maintainer__ = "Roberto Medina"
__email__ = "robertocarlosmedina.dev@gmail.com "
__status__ = "Production"

"""
    This is the class where all the game loop is controlled, and where all the action are
    controlled. And also all the cubes generated by the Cube class are controlled by here.
"""

from typing import Literal
import pygame
import numpy as np
from time import sleep
from src.support.font import Game_fonts as fonts
from src.support.colors import Game_color as color
from src.game_components.tic_tac_toe import Tic_Tac_Toe as TTT
from src.game_components.minimax import movimentoIA
from src.support.auxiliar_functions import write_from_file
from src.game_components.animated_play import Scale_animtion

class Game_loop:
    
    game_win: bool              # control if the game was won
    game_table: list            # store information about the game table
    game_events: pygame.event   # hold the current games events
    play_algorithm: str         # hold the current self playing algorithms
    cube_sizes: dict            # store all the information about the cubes
    game_cubes: list            # list of objets related to the cubes on th game
    nr_cubes: int               # to declare the number of cubes for the game
    players: list               # to store the configuration of the player 1
    current_player: bool        # current player to play
    

    def __init__(self, screen: pygame.Surface, screen_size: list, game_mode = None ) -> None:
        self.screen = screen
        self.screen_size = screen_size
        self.ttt = TTT(self.screen)
        self.game_assets = [
            ["./assets/img/circle-big.png", "./assets/img/cross-big.png"],
            ["./assets/img/circle.png", "./assets/img/cross.png"]]
        self.game_cubes = []
        self.row_radius = 20
        self.block_size = 100
        self.mouse_position = None
        self.current_player = int(True)
        self.car_board_pos = []
        # starting the game table info
        self.game_table = {"width": 320, "heigth": 320}
        self.game_table["x_position"] = self.screen_size[0]/2 - self.game_table["width"]/2
        self.game_table["y_position"] = self.screen_size[1]/2 - self.game_table["heigth"]/2 + 30
        # starting methods
        self.initializing_game_mode(game_mode)
        self.make_car_pos()
        # Animation
        self.animation = None

    def initializing_game_mode(self, game_mode: str) -> None:
        game_mode = "human_player"
        if game_mode == "human_player": 
             self.players = [self.ttt.getInputValido, self.ttt.getInputValido]
        elif game_mode == "ai_player":
            self.players = [self.ttt.getInputValido, movimentoIA]
        else:
            self.players = [movimentoIA, movimentoIA]

    def draw_game_board(self) -> None:
        pygame.draw.rect(
            self.screen, 
            color.blue_1.value, 
            pygame.Rect(self.game_table["x_position"], 
            self.game_table["y_position"], self.game_table["width"],
            self.game_table["heigth"] ),
            2,
        )
        font_size = pygame.font.Font.size(fonts.montserrat_size_22.value, "Player: ")
        line = fonts.montserrat_size_22.value.render("Player: ", True, color.white.value)
        self.screen.blit(line, (self.screen_size[0]/2-(font_size[0]/2), 15))
        
        self.screen.blit(pygame.image.load(self.get_img_url(self.ttt.token[int(self.current_player)], 1)),\
             (self.screen_size[0]/2-(font_size[0]/2), font_size[0]-25))
    
    def get_img_url(self, token, pos) -> str:
        if token == "O":
            return self.game_assets[pos][0]
        
        elif token == "X":
            return self.game_assets[pos][1]

        return " "
    
    def make_car_pos(self):
        x = self.game_table["x_position"] + 9
        y = self.game_table["y_position"] + 9
        for line in self.ttt.get_board():
            line_board_pos = []
            for _ in line:
                line_board_pos.append((x, y))
                x += 2 + self.block_size
            self.car_board_pos.append(line_board_pos)
            x = self.game_table["x_position"] + 9
            y += self.block_size + 2

    def draw_rows(self) -> None:
        x = self.game_table["x_position"] + 9
        y = self.game_table["y_position"] + 9
        for line in self.ttt.get_board():
            for col in line:
                display_surface = pygame.Surface((self.block_size, self.block_size))
                col_mode = self.get_img_url(col, 0)
                if col_mode != " ":
                    display_surface.fill(color.grey.value)
                    display_surface.blit(pygame.image.load(col_mode), (0, 0))
                else:
                    font_size = pygame.font.Font.size(fonts.montserrat_size_30.value, col)
                    line = fonts.montserrat_size_30.value.render(col, True, color.white.value)

                    display_surface.blit(line, (self.block_size/2 - (font_size[0]/2), self.block_size/2 - (font_size[1]/2)))
                    display_surface.fill(color.grey1.value)

                self.screen.blit(display_surface, (x, y))

                x += 2 + self.block_size
            x = self.game_table["x_position"] + 9
            y += self.block_size + 2

    def game_over(self, winner) -> Literal["game_over"]:
        write_from_file("./data/end_game_values.txt", "w",\
             f"{winner} {self.get_img_url(winner, 0)}")
        return "game_over"

    def play_animation(self, play_pos: list) -> None:
        img_size = [20, 20]
        display_surface = pygame.Surface((self.block_size, self.block_size))
        sur_pos = self.car_board_pos[play_pos[0]][play_pos[1]]
                
    # To run this page on the game
    def run_link(self, game_events :pygame.event) -> str:
        self.mouse_position = pygame.mouse.get_pos()
        self.draw_game_board()
        self.draw_rows()

        play_x, play_y = self.players[int(self.current_player)](self.ttt.get_board(), int(self.current_player),  \
            self.ttt.verificaGanhador, [self.game_table["x_position"], self.game_table["y_position"], self.block_size])
        if play_x != None:
            if(self.ttt.verificaMovimento(play_x, play_y)):
                scalling_animation = Scale_animtion(
                    self.screen, 
                    self.car_board_pos[play_y][play_x],
                    self.block_size, 
                    self.get_img_url(self.ttt.get_board()[play_x][play_y], 0)
                )
                scalling_animation.draw(self.draw_game_board, self.draw_rows)
                self.play_animation([play_x, play_y])
                self.ttt.fazMovimento(play_x, play_y, int(self.current_player))
                self.current_player = not self.current_player
            
        

        if self.ttt.verificaGanhador():
            return self.game_over(self.ttt.verificaGanhador())
        
        return "game_loop"
