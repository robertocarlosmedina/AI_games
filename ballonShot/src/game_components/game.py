__author__ = "Roberto Medina"
__copyright__ = "Copyright 2021, Roberto Carlos Medina"
__version__ = "0.0.1"
__maintainer__ = "Roberto Medina"
__email__ = "robertocarlosmedina.dev@gmail.com "
__status__ = "Production"

"""
    This is the class where all the game loop is controlled, and where all the action are
    controlled. And also all the cubes generated by the Cube class are controlled by here.
"""

import time
import pygame
from random import randint
from src.support.font import Game_fonts as fonts
from src.support.colors import Game_color as color
from src.support.auxiliar_functions import write_from_file, get_screen_text
from src.game_components.ballon import Ballon
from src.self_play.selfplay import AI_play

class Game_loop:
    
    game_events: pygame.event        # Hold the current games events
    mouse_position: tuple            # To store and refresh the mouse position
    disk_higth: int                  # the value of the disk height
    disk_scale: int                  # Scale to help drawing the disk's
    pegs_gaps: int                   # distance between the pegs
    board_size: tuple                # Hanoi board info (size's)
    n: int                           # number of disk's
    selector_pos: int                # Store the value selected by the selector's
    list_moves: list                 # store all the moves made by the AI agent
    pekers_arrows: list              # Store all the selector arrow peker's position
    play_arrows: list                # Store all the player move arrow's position
    peg_position: tuple              # store the first peg positon
    peg_and_disk: list               # Store a list of set's according the to number of peg's and disk's
    time_1: time.time               # Store the initial time
    general_time: time.time               # Store the initial time
    
    def __init__(self, game_obj: object) -> None:
        self.game_obj = game_obj
        self.n = self.game_obj.nr_disk
        self.play_pos = None
        self.time_1 = self.general_time = time.time()
        self.speed = 3
        self.ballonList = []
        self.ballonShoted = 0
        self.add_ballon_counter = 0
        self.generate_new_ballons()
    
    def page_tittles(self) -> None:
        """
            Draw the tittle header.
        """
        font_size = pygame.font.Font.size(fonts.montserrat_size_30.value, get_screen_text("game_tittle"))
        line = fonts.montserrat_size_30.value.render(get_screen_text("game_tittle"), True, color.brown.value)
        self.game_obj.screen.blit(line, (self.game_obj.screen_size[0]/2-(font_size[0]/2), 20))

    def make_play(self) -> None:
        """
            Method that control the playr move by the mouse.
        """
        pass

    def game_over(self, game_result: bool) -> None:
        """
            Method to store the game results in a file and also change the current game link.
        """
        time_2 = time.time()
        time_interval = time_2 - self.time_1
        write_from_file("./data/end_game_values.txt", "w", f"{int(game_result)} {self.moves} {str(time_interval)[0:5]}")
        self.game_obj.current_link = "game_over"
        
    def draw_ballons(self) -> None:
        """
            Method to draw all the disk according to their state.
        """
        pass

    def draw_game_info(self) -> None:
        """
            Method to draw all the game info on the screen.
        """
        font_size = pygame.font.Font.size(fonts.montserrat_size_18.value, f"Moves: {self.ballonShoted}")
        line = fonts.montserrat_size_18.value.render(f"Moves: {self.ballonShoted}", True, color.white.value)
        self.game_obj.screen.blit(line, (self.game_obj.screen_size[0]/2-(font_size[0]/2), 400))

        time_2 = time.time()
        time_interval = time_2 - self.time_1
        font_size = pygame.font.Font.size(fonts.montserrat_size_18.value, f"Timer: ")
        line = fonts.montserrat_size_18.value.render(f"Timer: ", True, color.white.value)
        self.game_obj.screen.blit(line, (self.game_obj.screen_size[0]/2-(font_size[0]/2) - 50, 430))

        font_size = pygame.font.Font.size(fonts.montserrat_size_18.value, f"{str(time_interval)[0:5]}")
        line = fonts.montserrat_size_18.value.render(f"{str(time_interval)[0:5]}", True, color.white.value)
        self.game_obj.screen.blit(line, (self.game_obj.screen_size[0]/2-(font_size[0]/2) + 50, 430))

        font_size = pygame.font.Font.size(fonts.montserrat_size_14.value, 'Press Mouse Left to Shot')
        line = fonts.montserrat_size_14.value.render('Press Mouse Left to Shot', True, color.red.value)
        self.game_obj.screen.blit(line, (self.game_obj.screen_size[0]/2-(font_size[0]/2), 470))

    def generate_new_ballons(self) -> None:
        """
            Method to Generate new Ballons
        """
        [self.ballonList.append(Ballon(self.game_obj, randint(self.speed-2, self.speed))) for _ in range(randint(5, 8))]
    
    def check_ballons_out_of_screen(self) -> None:
        previuos_len = len(self.ballonList)
        self.ballonList = [ballon for ballon in self.ballonList if ballon.get_position()[1] > -60]
        self.add_ballon_counter += previuos_len - len(self.ballonList)

    def run_link(self) -> None:
        """
            The main loop of the game page.
        """
        change_page_by_action = change_page_by_event = False

        while True:
            self.game_obj.screen_fill_bg()
            self.mouse_position = pygame.mouse.get_pos()
            if time.time() - self.time_1 > 4:
                self.generate_new_ballons()
                self.time_1 = time.time()           

            [ballon.draw_ballon() for ballon in self.ballonList]
            self.check_ballons_out_of_screen()
            if pygame.key.get_pressed()[pygame.K_e]:
                self.selector_pos = 0

            change_page_by_event = self.game_obj.game_events_handler()



            # if self.peg_and_disk == [set(), set(), set([i + 1 for i in range(self.n)])]:
            #     change_page_by_action = True
            #     self.game_over(True)
            
            self.draw_game_info()

            if change_page_by_action or change_page_by_event:
                break

            pygame.display.update()
        time.sleep(1)
