__author__ = "Roberto Medina"
__copyright__ = "Copyright 2021, Roberto Carlos Medina"
__version__ = "0.0.1"
__maintainer__ = "Roberto Medina"
__email__ = "robertocarlosmedina.dev@gmail.com "
__status__ = "Production"

"""
    This is the class where all the game loop is controlled, and where all the action are
    controlled. And also all the cubes generated by the Cube class are controlled by here.
"""

import pygame
import numpy as np
from random import randint, choice
from pygame import font
import numpy as np
from src.support.font import Game_fonts as fonts
from src.support.colors import Game_color as color

class Game_loop:
    
    game_win :bool              # control if the game was won
    game_table :list            # store information about the game table
    game_events :pygame.event   # hold the current games events
    play_algorithm :str         # hold the current self playing algorithms
    cube_sizes :dict            # store all the information about the cubes
    game_cubes :list            # list of objets related to the cubes on th game
    nr_cubes :int               # to declare the number of cubes for the game

    def __init__(self, screen :pygame.Surface, screen_size :list, opponent_type = None ) -> None:
        self.screen = screen
        self.player = 1
        self.screen_size = screen_size
        self.opponent = (opponent_type, 2)
        self.board = np.zeros([6,7]).astype(np.uint8)
        self.game_cubes = []
        self.row_radius = 20
        self.row_distance = 30
        # starting cubes gaps info
        self.nr_cubes = 4
        self.cube_sizes = {"cube_gap": self.nr_cubes}
        # starting the game table info
        self.game_table = {"width": 360, "heigth": 300}
        self.game_table["x_position"] = self.screen_size[0]/2 - self.game_table["width"]/2
        self.game_table["y_position"] = self.screen_size[1]/2 - self.game_table["heigth"]/2
        # starting methods

    def draw_game_board(self) -> None:
        pygame.draw.rect(
            self.screen, 
            color.blue_1.value, 
            pygame.Rect(self.game_table["x_position"], 
            self.game_table["y_position"], self.game_table["width"],
            self.game_table["heigth"] ),
            border_radius = 20
        )
    
    def draw_rows(self) -> None:
        x = self.game_table["x_position"] + self.row_distance 
        y = self.game_table["y_position"] + self.row_distance
        self.board[5][1] = 1
        self.board[5][2] = 2

        for line in self.board:
            for col in line:
                if col == 1:
                    pygame.draw.circle(self.screen, color.red.value, (x, y), self.row_radius)
                elif col == 2:
                    pygame.draw.circle(self.screen, color.yellow.value, (x, y), self.row_radius)
                else:
                    pygame.draw.circle(self.screen, color.dark_blue.value, (x, y), self.row_radius)
                x += self.row_radius + self.row_distance
            x = self.game_table["x_position"] + self.row_distance 
            y += self.row_distance + 18

    def game_completed(self, player_num):
        player_win_str = '{0}{0}{0}{0}'.format(player_num)
        board = self.board
        to_str = lambda a: ''.join(a.astype(str))

        def check_horizontal(b):
            for row in b:
                if player_win_str in to_str(row):
                    return True
            return False

        def check_verticle(b):
            return check_horizontal(b.T)

        def check_diagonal(b):
            for op in [None, np.fliplr]:
                op_board = op(b) if op else b
                
                root_diag = np.diagonal(op_board, offset=0).astype(np.int)
                if player_win_str in to_str(root_diag):
                    return True

                for i in range(1, b.shape[1]-3):
                    for offset in [i, -i]:
                        diag = np.diagonal(op_board, offset=offset)
                        diag = to_str(diag.astype(np.int))
                        if player_win_str in diag:
                            return True

            return False

        return (check_horizontal(board) or
                check_verticle(board) or
                check_diagonal(board))
                
    # To run this page on the game
    def run_link(self, game_events :pygame.event) -> str:
        self.draw_game_board()
        self.draw_rows()
        return "game_loop"
